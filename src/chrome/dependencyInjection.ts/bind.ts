import { Container, interfaces } from 'inversify';
import { TYPES } from './types';
import { IDOMInstrumentationBreakpoints, CDTPDOMDebugger, IBrowserNavigation, CDTPPage, IDebugeeVersionProvider, CDTPBrowser } from '../target/cdtpSmallerModules';
import { IEventsToClientReporter, EventSender } from '../client/eventSender';
import { IDebugeeExecutionControl, ControlDebugeeExecution, IDebugeeStepping } from '../target/controlDebugeeExecution';
import { IPauseOnExceptions, IAsyncDebuggingConfiguration, IScriptSources, CDTPDebugger } from '../target/cdtpDebugger';
import { IBreakpointFeaturesSupport, BreakpointFeaturesSupport } from '../target/breakpointFeaturesSupport';
import { IStackTracePresentationLogicProvider, StackTracesLogic } from '../internal/stackTraces/stackTracesLogic';
import { CDTPStackTraceParser } from '../target/cdtpStackTraceParser';
import { CDTPLocationParser } from '../target/cdtpLocationParser';
import { SourcesLogic } from '../internal/sources/sourcesLogic';
import { CDTPScriptsRegistry } from '../target/cdtpScriptsRegistry';
import { ClientToInternal } from '../client/clientToInternal';
import { InternalToClient } from '../client/internalToClient';
import { BreakpointsLogic } from '../internal/breakpoints/breakpointsLogic';
import { PauseOnExceptionOrRejection } from '../internal/exceptions/pauseOnException';
import { Stepping } from '../internal/stepping/stepping';
import { DotScriptCommand } from '../internal/sources/features/dotScriptsCommand';
import { BreakpointsRegistry } from '../internal/breakpoints/breakpointsRegistry';
import { ReAddBPsWhenSourceIsLoaded } from '../internal/breakpoints/features/reAddBPsWhenSourceIsLoaded';
import { PauseScriptLoadsToSetBPs } from '../internal/breakpoints/features/pauseScriptLoadsToSetBPs';
import { BPRecipieInLoadedSourceLogic } from '../internal/breakpoints/bpRecipieInLoadedSourceLogic';
import { CDTPDiagnostics } from '../target/cdtpDiagnostics';
import { DeleteMeScriptsRegistry } from '../internal/scripts/scriptsRegistry';
import { SyncStepping } from '../internal/stepping/features/syncStepping';
import { AsyncStepping } from '../internal/stepping/features/asyncStepping';
import { BreakpointIdRegistry } from '../target/breakpointIdRegistry';
import { ExceptionThrownEventProvider } from '../target/exceptionThrownEventProvider';
import { ExecutionContextEventsProvider } from '../target/executionContextEventsProvider';
import { IInspectDebugeeState, InspectDebugeeState } from '../target/inspectDebugeeState';
import { IUpdateDebugeeState, UpdateDebugeeState } from '../target/updateDebugeeState';
import { SmartStepLogic } from '../internal/features/smartStep';
import { LineColTransformer } from '../../transformers/lineNumberTransformer';
import { ChromeDebugLogic } from '../chromeDebugAdapter';
import { CDTPOnScriptParsedEventProvider, IScriptParsedProvider } from '../target/cdtpOnScriptParsedEventProvider';
import { CDTPDebuggerEventsProvider, ICDTPDebuggerEventsProvider } from '../target/cdtpDebuggerEventsProvider';
import { ITargetBreakpoints, CDTPTargetBreakpoints } from '../target/cdtpTargetBreakpoints';
import { MethodsCalledLogger } from '../logging/methodsCalledLogger';

export function bindAll(di: Container) {
    bind<IDOMInstrumentationBreakpoints>(di, TYPES.IDOMInstrumentationBreakpoints, CDTPDOMDebugger);
    bind<IAsyncDebuggingConfiguration>(di, TYPES.IAsyncDebuggingConfiguration, CDTPDebugger);
    bind<IScriptSources>(di, TYPES.IScriptSources, CDTPDebugger);
    bind<IStackTracePresentationLogicProvider>(di, TYPES.IStackTracePresentationLogicProvider, SmartStepLogic);
    //  bind<IStackTracePresentationLogicProvider>(di, TYPES.IStackTracePresentationLogicProvider, SkipFilesLogic);
    bind<IEventsToClientReporter>(di, TYPES.IEventsToClientReporter, EventSender);
    bind<IDebugeeExecutionControl>(di, TYPES.IDebugeeExecutionControl, ControlDebugeeExecution);
    bind<IPauseOnExceptions>(di, TYPES.IPauseOnExceptions, CDTPDebugger);
    bind<IBreakpointFeaturesSupport>(di, TYPES.IBreakpointFeaturesSupport, BreakpointFeaturesSupport);
    bind<IInspectDebugeeState>(di, TYPES.IInspectDebugeeState, InspectDebugeeState);
    bind<IUpdateDebugeeState>(di, TYPES.IUpdateDebugeeState, UpdateDebugeeState);
    bind<CDTPStackTraceParser>(di, TYPES.CDTPStackTraceParser, CDTPStackTraceParser);
    bind<CDTPLocationParser>(di, TYPES.CDTPLocationParser, CDTPLocationParser);
    bind<ChromeDebugLogic>(di, TYPES.ChromeDebugLogic, ChromeDebugLogic);
    bind<SourcesLogic>(di, TYPES.SourcesLogic, SourcesLogic);
    bind<CDTPScriptsRegistry>(di, TYPES.CDTPScriptsRegistry, CDTPScriptsRegistry);
    bind<ClientToInternal>(di, TYPES.ClientToInternal, ClientToInternal);
    bind<InternalToClient>(di, TYPES.InternalToClient, InternalToClient);
    bind<StackTracesLogic>(di, TYPES.StackTracesLogic, StackTracesLogic);
    bind<BreakpointsLogic>(di, TYPES.BreakpointsLogic, BreakpointsLogic);
    bind<PauseOnExceptionOrRejection>(di, TYPES.PauseOnExceptionOrRejection, PauseOnExceptionOrRejection);
    bind<Stepping>(di, TYPES.Stepping, Stepping);
    bind<DotScriptCommand>(di, TYPES.DotScriptCommand, DotScriptCommand);
    bind<CDTPDebugger>(di, TYPES.CDTPDebugger, CDTPDebugger);
    bind<BreakpointsRegistry>(di, TYPES.BreakpointsRegistry, BreakpointsRegistry);
    bind<ReAddBPsWhenSourceIsLoaded>(di, TYPES.ReAddBPsWhenSourceIsLoaded, ReAddBPsWhenSourceIsLoaded);
    bind<PauseScriptLoadsToSetBPs>(di, TYPES.PauseScriptLoadsToSetBPs, PauseScriptLoadsToSetBPs);
    bind<BPRecipieInLoadedSourceLogic>(di, TYPES.BPRecipieInLoadedSourceLogic, BPRecipieInLoadedSourceLogic);
    bind<EventSender>(di, TYPES.EventSender, EventSender);
    bind<CDTPDiagnostics>(di, TYPES.CDTPDiagnostics, CDTPDiagnostics);
    bind<DeleteMeScriptsRegistry>(di, TYPES.DeleteMeScriptsRegistry, DeleteMeScriptsRegistry);
    //  bind<BaseSourceMapTransformer>(di, TYPES.BaseSourceMapTransformer, BaseSourceMapTransformer);
    //  bind<BasePathTransformer>(di, TYPES.BasePathTransformer, BasePathTransformer);
    bind<SyncStepping>(di, TYPES.SyncStepping, SyncStepping);
    bind<AsyncStepping>(di, TYPES.AsyncStepping, AsyncStepping);
    bind<BreakpointIdRegistry>(di, TYPES.BreakpointIdRegistry, BreakpointIdRegistry);
    bind<ExceptionThrownEventProvider>(di, TYPES.ExceptionThrownEventProvider, ExceptionThrownEventProvider);
    bind<ExecutionContextEventsProvider>(di, TYPES.ExecutionContextEventsProvider, ExecutionContextEventsProvider);
    bind<LineColTransformer>(di, TYPES.LineColTransformer, LineColTransformer);
    bind<IDebugeeStepping>(di, TYPES.IDebugeeStepping, ControlDebugeeExecution);
    bind<IBrowserNavigation>(di, TYPES.IBrowserNavigation, CDTPPage);
    bind<IScriptParsedProvider>(di, TYPES.IScriptParsedProvider, CDTPOnScriptParsedEventProvider);
    bind<ICDTPDebuggerEventsProvider>(di, TYPES.ICDTPDebuggerEventsProvider, CDTPDebuggerEventsProvider);
    bind<IDebugeeVersionProvider>(di, TYPES.IDebugeeVersionProvider, CDTPBrowser);
    bind<ITargetBreakpoints>(di, TYPES.ITargetBreakpoints, CDTPTargetBreakpoints);
}

function bind<T extends object>(container: Container, serviceIdentifier: interfaces.ServiceIdentifier<T>, newable: interfaces.Newable<T>): void {
    container.bind<T>(serviceIdentifier).to(newable).inSingletonScope().onActivation((_context, object) => {
        return new MethodsCalledLogger<T>(object, serviceIdentifier.toString()).wrapped();
    });
}
